<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dotnet on</title><link>https://www.alexander-koepke.de/categories/dotnet/</link><description>Recent content in Dotnet on</description><generator>Hugo</generator><language>de-de</language><lastBuildDate>Sat, 31 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alexander-koepke.de/categories/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>Crow's NestMQTT</title><link>https://www.alexander-koepke.de/post/2025-06-01_crows_nestmqtt/</link><pubDate>Sat, 31 May 2025 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2025-06-01_crows_nestmqtt/</guid><description>&lt;h1 id="crows-nestmqtt-and-the-vibe-engineering-adventure">Crow&amp;rsquo;s NestMQTT and the Vibe Engineering Adventure&lt;/h1>
&lt;p>In the world of (Industrial) Internet of Things (IIoT), MQTT is a widely adopted messaging protocol. Whether you’re debugging a flaky device or trying to understand system-wide message flow, a good MQTT client is a lifesaver.&lt;/p>
&lt;p>There are many excellent MQTT clients available—like MqttExplorer, MQTTX, mqttui, and the classic &lt;code>mosquitto_sub&lt;/code>. However, none quite met &lt;strong>my specific needs&lt;/strong>. That kicked off a wild journey: building my own client, &lt;strong>Crow&amp;rsquo;s NestMQTT&lt;/strong>, while exploring how &lt;strong>Generative AI can accelerate software development&lt;/strong>.&lt;/p></description></item><item><title>Running OPC UA server simulation in dotnet aspire</title><link>https://www.alexander-koepke.de/post/2025-05-07_opcplc_aspire/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2025-05-07_opcplc_aspire/</guid><description>&lt;h1 id="simulating-an-opc-ua-server-with-net-aspire-and-opc-plc">Simulating an OPC UA Server with .NET Aspire and OPC PLC&lt;/h1>
&lt;p>Deploying an OPC UA server simulation is a common need during development and testing of industrial IoT applications.
Recently, a customer asked how to set up such a simulation using &lt;strong>.NET Aspire&lt;/strong>, in order to streamline development
workflows and easily monitor system components, logs, metrics, and inter-service communication.&lt;/p>
&lt;p>.NET Aspire provides an ideal environment for orchestrating microservices and dependencies, making it a great fit for
hosting a simulated OPC UA server. For the server simulation, I use the free and open-source
&lt;a href="https://github.com/Azure-Samples/iot-edge-opc-plc">OPC PLC&lt;/a> provided by Microsoft. While it&amp;rsquo;s possible to run the
server from source, I prefer using the containerized version published on the Microsoft Container Registry (MCR),
which integrates more easily into an Aspire-based solution.&lt;/p></description></item><item><title>Zeit-Trennzeichen bei DateTime</title><link>https://www.alexander-koepke.de/post/2016-07-14-zeit-trennzeichen-bei-datetime/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2016-07-14-zeit-trennzeichen-bei-datetime/</guid><description>&lt;p>Diese Woche hat es das .NET geschafft mich zu überraschen, ein Programm ist beim Kunden mit italienischen Windows immer wieder abgestürzt. Nach langem Suchen hat ein Kollege das Problem erkannt, was durch das folgende Beispiel veranschaulicht wird:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> ci = &lt;span style="color:#ff79c6">new&lt;/span> CultureInfo(&lt;span style="color:#f1fa8c">&amp;#34;it-IT&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> dateTime = DateTime.Now;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> str = dateTime.ToString(&lt;span style="color:#f1fa8c">&amp;#34;dd.mm.yyyy hh:mm:ss&amp;#34;&lt;/span>, ci);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(str);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ausgabe (.NET 3.5): 14.07.2016 &lt;strong>20.45.30&lt;/strong>&lt;br>
Ausgabe (.NET 4.0): 14.07.2016 &lt;strong>20:45:30&lt;/strong>&lt;/p>
&lt;p>In der Ausgabe erkennt man, dass abhängig von der .NET Version, das Zeit-Trennzeichen ändert. Aber warum wird das Trennzeichen überhaupt verändert, es wurde doch eine feste Format-Zeichenkette angegeben? Die &lt;a href="https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx#escape">Dokumentation&lt;/a> beschreibt:&lt;br>
The &amp;ldquo;d&amp;rdquo;, &amp;ldquo;f&amp;rdquo;, &amp;ldquo;F&amp;rdquo;, &amp;ldquo;g&amp;rdquo;, &amp;ldquo;h&amp;rdquo;, &amp;ldquo;H&amp;rdquo;, &amp;ldquo;K&amp;rdquo;, &amp;ldquo;m&amp;rdquo;, &amp;ldquo;M&amp;rdquo;, &amp;ldquo;s&amp;rdquo;, &amp;ldquo;t&amp;rdquo;, &amp;ldquo;y&amp;rdquo;, &amp;ldquo;z&amp;rdquo;, &lt;strong>&amp;quot;:&amp;quot;&lt;/strong>, or &amp;ldquo;/&amp;rdquo; characters in a format string are interpreted as custom format specifiers rather than as literal characters. To prevent a character from being interpreted as a format specifier, you can precede it with a backslash (\), which is the escape character.&lt;/p></description></item><item><title>Performance Vortrag aus 2015</title><link>https://www.alexander-koepke.de/post/2016-06-13-performance-vortrag-aus-2015/</link><pubDate>Mon, 13 Jun 2016 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2016-06-13-performance-vortrag-aus-2015/</guid><description>&lt;p>Letztes Jahr habe ich einen Vortrag zum Thema Performance gehalten, der Vermitteln sollte warum dieses Thema jeden (.NET-)Entwickler betrifft.&lt;/p>
&lt;p>Nachdem ich mir jetzt die Zeit genommen habe um auch die Sprechernotizen aka &amp;ldquo;Tonspur&amp;rdquo; auf zuschreiben, konnte ich den Vortrag online stellen:&lt;/p>
&lt;p>&lt;a href="https://github.com/koepalex/performance_talk_2015">https://github.com/koepalex/performance_talk_2015&lt;/a>&lt;/p>
&lt;p>Vielleicht ist der Vortrag für jemanden Hilfreich :)&lt;/p></description></item><item><title>Debugging von Performance Problemen in .NET</title><link>https://www.alexander-koepke.de/post/2013-11-27-debugging-von-performance-problemen-in-net/</link><pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-11-27-debugging-von-performance-problemen-in-net/</guid><description>&lt;p>Die Analyse von Speicherproblemen ist eine Aufgabe die bei großen .NET Anwendungen häufiger vorkommt. In C++ wurde gesucht, wer welche Speicherblöcke angefordert und nicht wieder freigegeben hat und im .NET Umfeld wird eben gesucht warum der Gabarge-Collector den Speicher nicht freigeben kann. Oder man sucht warum einige Benutzeraktionen besonders lange benötigen. Für die Analyse gibt es eine ganze Reihe guter kommerzieller Programme, auf diese möchte ich jedoch nicht eingehen, sondern ein paar kostenlosen Alternativen vorstellen.&lt;/p></description></item><item><title>Neues vom GC in .NET 4.0 und 4.5</title><link>https://www.alexander-koepke.de/post/2013-10-21-neues-vom-gc-in-net-4-0-und-4-5/</link><pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-10-21-neues-vom-gc-in-net-4-0-und-4-5/</guid><description>&lt;p>Heute möchte ich etwas über Erneuerungen im .NET 4.0 / 4.5 sprechen. Das genannte bezieht sich auf den Workstation Garbage-Collector. Die Informationen für den Server Garbage-Collector entnehmen sie bitte den Links. Beginnen wir jedoch zunächst mit einer kurzen Auffrischung.&lt;/p>
&lt;h3 id="wiederholung">Wiederholung&lt;/h3>
&lt;p>Das .NET Framework unterteilt seinen Heap in verschiedene Generationen.&lt;/p>
&lt;ul>
&lt;li>In der &lt;strong>Gen0&lt;/strong> werden fast alle Objekte erstellt. Die Anfangsgröße beträgt rund 256KB.&lt;/li>
&lt;li>In der &lt;strong>Gen1&lt;/strong> werden Objekte gespeichert die &lt;em>eine&lt;/em> Garbage-Collection überlebt haben. Die Anfangsgröße beträgt rund 2 MB.&lt;/li>
&lt;li>In der &lt;strong>Gen2&lt;/strong> werden Objekte gespeichert die &lt;em>mehr als eine&lt;/em> Garbage-Collection überlebt haben Die Anfangsgröße beträgt 10 MB.&lt;/li>
&lt;/ul>
&lt;p>Die soeben genannten Anfangsgrößen können zur Laufzeit variiert werden. Am stärksten wird sich i.A. die Größe der Gen2 verändern (wachsen), da die Gen2 als &lt;em>Endlager&lt;/em> für alle länger benötigten Objekte dient.&lt;/p></description></item><item><title>GetHashCode dein Freund und Sorgenkind</title><link>https://www.alexander-koepke.de/post/2013-10-20-gethashcode-dein-freund-und-sorgenkind/</link><pubDate>Sun, 20 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-10-20-gethashcode-dein-freund-und-sorgenkind/</guid><description>&lt;p>Eine wichtige Methode beim Arbeiten im .NET Umfeld ist GetHashCode. Sie gibt einen 32 Bit Integer zurück der das Objekt identifizieren soll. Der Hash-Code beschreibt also die Identität des Objektes (im Gegensatz zur Speicherreferenz auf das Objekt).&lt;/p>
&lt;p>Daraus leitet sich die Frage ab &lt;em>Wann zwei Objekte die selbe Identität besitzen?&lt;/em> Im Falle einer Object-Relational-Mapper Klasse beispielsweise, wenn die Instanzen der O/R-Mapper Klasse auf ein und die selbe Zeile(n) der selben Tabelle(n) der selben Datenbank(en) verweisen. Klassischer weise durch eine Kette von Primary-Keys. Der Hash-Code ist auch ein Sorgenkind eines Entwicklers da schon hier die Probleme beginnen. Eine einfach Implementierungen könnte sein:&lt;/p></description></item><item><title>Pipe aus eigenen Programmen nutzen</title><link>https://www.alexander-koepke.de/post/2013-10-13-pipe-aus-eigenen-programmen-nutzen/</link><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-10-13-pipe-aus-eigenen-programmen-nutzen/</guid><description>&lt;p>Mittels der von Unix Systemen bekannten Pipe (&lt;em>|&lt;/em>) ist es auch unter Windows (via CMD-Line) möglich einzelne Kommandos zu verbinden. Die Pipe ermöglicht es die Ausgabe vom dem vorherigen Kommando direkt als Input des aktuellen Kommandos zu verwenden. Beispielsweise den Inhalt einer Datei einem Skript zu übergeben: &lt;code>type input.md | perl Markdown.pl &amp;gt; output.html&lt;/code>&lt;/p>
&lt;p>Logisch gesehen Ersetzt der Inhalt der Pipe ein einzelnes Konsolen-Argument. Um diese Funktionalität auch in den eigenen (Konsolen-) Programme verwenden zu können, sind im Allgemeinen nur zwei Erweiterungen notwendig.&lt;/p></description></item><item><title>Ermitteln des PID (Processidentifier) des Vaterprozesses</title><link>https://www.alexander-koepke.de/post/2012-10-14-ermitteln-des-pid-processidentifier-des-vaterprozesses/</link><pubDate>Sun, 14 Oct 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-10-14-ermitteln-des-pid-processidentifier-des-vaterprozesses/</guid><description>&lt;p>In manchen Fällen ist es notwendig heraus zu finden, welches der Vaterprozess eines Prozesses ist. Dafür gibt es im Allgemeinen drei verschiedene Lösungen im Windows .NET Umfeld.&lt;/p>
&lt;p>Die häufigste Lösung ist die Verwendung von &lt;strong>Performancecountern&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> process = FindProcess(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">using&lt;/span> (&lt;span style="color:#8be9fd">var&lt;/span> pC = &lt;span style="color:#ff79c6">new&lt;/span> PerformanceCounter(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Process&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Creating Process ID&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">string&lt;/span>.Format(&lt;span style="color:#f1fa8c">&amp;#34;{0}#{1}&amp;#34;&lt;/span>, process.ProcessName, &lt;span style="color:#bd93f9">1&lt;/span>),   
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process.MachineName)) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> pid = (&lt;span style="color:#8be9fd">int&lt;/span>)pC.NextValue(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#f1fa8c">&amp;#34;parent pid = {0}&amp;#34;&lt;/span>, pid); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die Verwendung von Performancecountern im Allgemeinen kann zwei mögliche Nachteile haben:&lt;/p></description></item><item><title>DSLs, Extension Methods und Fluent Interfaces</title><link>https://www.alexander-koepke.de/post/2012-07-28-dsls-extension-methods-und-fluent-interfaces/</link><pubDate>Sat, 28 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-07-28-dsls-extension-methods-und-fluent-interfaces/</guid><description>&lt;p>In den letzten Jahren wurde in der Softwareentwicklung viel über Domänenspezifische Sprachen (domain specific language, kurz: DSLs) geschrieben. DSLs sollen von einem Domänenexperten gelesen werden können, auch ohne das die Domänenexperten über Programmierkenntnisse verfügen. DSLs können auch Entwicklern helfen die Quelltexte leserlicher zu machen, sowie Fehler zu vermeiden. Die Quelltextzeile:&lt;/p>
&lt;blockquote>
&lt;p>if (!SessionEstablished)&lt;/p>&lt;/blockquote>
&lt;p>Ist einfach verständlich (für diejenigen welche eine C ähnliche Syntax verstehen), als Alternative könnte folgende Quelltextzeile dienen:&lt;/p></description></item><item><title>Inversion Of Control(-Container), Service Locator und Dependency Injection</title><link>https://www.alexander-koepke.de/post/2012-06-08-inversion-of-control-container-service-locator-und-dependency-injection/</link><pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-06-08-inversion-of-control-container-service-locator-und-dependency-injection/</guid><description>&lt;p>IOC-Container und DI sind zurzeit in vielen Fachzeitschriften diskutiert. Hier der Versuch einer kompakte Übersicht, die IOC, DI, SL und IOC-Container im Zusammenspiel erklärt.&lt;/p>
&lt;p>&lt;strong>&lt;em>Inversion Of Control&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Beschreibt ein Paradigma zum Entwerfen von Frameworks. Ein Unterschied zwischen einem Framework und einer Bibliothek besteht darin, dass in einem Framework Methoden vom Verwender des Framework aufgerufen werden. Dies verändert den Kontrollfluss, bei einer klassischen Bibliothek, ruft der Verwender eine Methode auf, deren Funktionalität wird abgearbeitet und die Methode kehrt zum Aufrufer zurück. Die Steuerung des Kontrollflusses liegt also in der Hand des Verwenders der Bibliothek. Ein gutes Beispiel ist das .NET Framework, der Verwender kann Methoden über Events an Ereignisse binden, dass .NET Framework entscheidet, wann es die Funktionalität des Verwenders aufruft.&lt;/p></description></item><item><title>Vermeidung von switch-case zur Typen Bestimmung beim Aufruf von generischen Methoden</title><link>https://www.alexander-koepke.de/post/2012-04-20-vermeidung-von-switch-case-zur-typen-bestimmung-beim-aufruf-von-generischen-methoden-3/</link><pubDate>Fri, 20 Apr 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-04-20-vermeidung-von-switch-case-zur-typen-bestimmung-beim-aufruf-von-generischen-methoden-3/</guid><description>&lt;p>In der Entwicklung mit .NET hat man öfter folgendes Problem:&lt;/p>
&lt;p>Methoden sind generisch implementiert und zu verwendende Objekte sind nur in Form von Referenzen auf Basistypen vorhanden (z.B. System.Array, System.Object). Diese Referenzen können nicht direkt an generische Methode übergeben werden (ergibt einen Compile Fehler).&lt;/p>
&lt;p>Häufig liegen daher Typinformationen als String vor (über FullName-Property, aus Konfigurationsdatei, …). Diese Informationen werden anschließend verwendet, um den Typ der Referenz über switch-case aufzulösen.&lt;/p>
&lt;p>Zum Beispiel:&lt;/p></description></item><item><title>UnauthorizedAccessException beim Kopieren einer Datei</title><link>https://www.alexander-koepke.de/post/2011-11-07-unauthorizedaccessexception-beim-kopieren-einer-datei/</link><pubDate>Mon, 07 Nov 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-11-07-unauthorizedaccessexception-beim-kopieren-einer-datei/</guid><description>&lt;p>Kopieren, verschieben, umbenennen und löschen von Dateien gehören zu häufigen Aufgaben eines Softwareentwicklers. In diesem Beitrag sollen ein paar Dinge aufgezeigt werden die einem beim kopieren von Datein vielleicht nicht bewusst sind. Wie kopiert man jetzt am besten eine Datei? Eine Variante ist die statische Methode der Klasse File:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>File.Copy(“C:\\input\\test.bmp“, “C:\\output\\test.bmp“, &lt;span style="color:#ff79c6">true&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Damit man sich Überprüfungen wie ob die Datei bereits existiert (File.Exist()) sparen kann, wird die Überladung der Copy-Methode verwendet, welche bestehende Dateien überschreibt. Solange man die Software nur mit administrativen Rechten betreibt, hat man alles richtig gemacht. Muss die Software auch mit Benutzer Rechten arbeiten, kann man hier eine UnauthorizedAccessException bekommen. Dies würde zum Beispiel eintreten wenn eine schreibgeschützte Datei, bereits im Zielverzeichnis existiert und erneut in dieses Verzeichnis kopiert werden soll. Die .Net Implementierung der Copy-Methode fordert Berechtigungen on demand an, das bedeutet erst, wenn besondere Zugriffsrechte benötigt werden, werden diese angefordert. Als Benutzer hat man aber nicht die benötigten Rechte um schreibgeschützte Dateien zu überschreiben. Um diesen speziellen Fall zu lösen, könnte man nach dem kopieren die Attribute der Datei verändern (dafür genügen die Benutzer Rechte):&lt;/p></description></item><item><title>WPF RichTextBox mit Durchgestrichenden Text</title><link>https://www.alexander-koepke.de/post/2011-06-18-wpf-richtextbox-mit-durchgestrichenden-text/</link><pubDate>Sat, 18 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-18-wpf-richtextbox-mit-durchgestrichenden-text/</guid><description>&lt;p>Um bei einer WPF RichTextBox einen Text &lt;strong>Fett&lt;/strong>, &lt;em>Kursiv&lt;/em> oder Unterstrichen darzustellen ist nicht viel notwenig. Eigentlich muss man im XAML nur einen (Toggle)Button definieren, der ein Kommando (EditingCommands) an die RichTextBox sendet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;ToggleButton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Command=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;EditingCommands.ToggleItalic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">CommandTarget=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;{Binding ElementName=myRichTextBox}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Content=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Italic&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;RichTextBox/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Genauso einfach verhält es sich einen Text Hochgestellt oder Tiefgestellt darzustellen, mann muss nur zusätzlich noch die Schrift-Familie des Hinter der RichTextBox liegenden Dokumentes verändern:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;ToggleButton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Command=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;EditingCommands.ToggleSubscript&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">CommandTarget=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;{Binding ElementName=myRichTextBox}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Content=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Subscript&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;RichTextBox/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">&amp;lt;!--on default fontfamily subscript and superscript dont work!!--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;lt;FlowDocument&lt;/span> &lt;span style="color:#50fa7b">FontFamily=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Palatino Linotype&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">FontSize=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;14&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;/RichTextBox&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die Veränderungen an dem Text funktionieren in zwei Modi:&lt;/p></description></item><item><title>Events über Threadgrenzen</title><link>https://www.alexander-koepke.de/post/2011-06-10-events-uber-threadgrenzen/</link><pubDate>Fri, 10 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-10-events-uber-threadgrenzen/</guid><description>&lt;p>Die meisten Tools/Programme verrichten Ihre Arbeit in Threads um die Oberfläche (UI) nicht zu blockieren. Eine &amp;ldquo;Kommunikations-Möglichkeit&amp;rdquo; um die UI beim Eintreten von bestimmten Gegebenheiten zu benachrichtigen sind Events. Ein Event im .Net ruft seine Ziele (InvokationList) aus dem Thread auf, aus dem es &amp;ldquo;gefeuert&amp;rdquo; wird. UI Controls, können i.A. nur im Mainthread arbeiten. Einen Zugriff aus einen anderen Thread führt zu einer Exception. Über das Interface ISynchronizedInvoke (implementiert von allen .Net UI Controls):&lt;/p></description></item><item><title>Tracing/Logging und die Config-Datei</title><link>https://www.alexander-koepke.de/post/2011-06-08-tracinglogging-config-file/</link><pubDate>Wed, 08 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-08-tracinglogging-config-file/</guid><description>&lt;p>Logging von Informationen ist so gut wie in jedem Programm notwendig. Nicht alle Entwickler können oder wollen ein professionelles Log-Tool wie z.B. &lt;a href="http://logging.apache.org/log4net/index.html">log4net&lt;/a> oder &lt;a href="http://nlog-project.org/">nlog&lt;/a> verwenden. In vielen Fällen reichen auch Debug.WriteLine oder Trace.WriteLine (letztes schreibt auch wenn die Software im Modus „Release“ kompiliert wurde).&lt;/p>
&lt;p>Über eine Config-Datei lassen sich u.a. verschiedene TraceListener auswählen:&lt;/p>
&lt;ol>
&lt;li>ConsoleTraceListener&lt;/li>
&lt;li>DefaultTraceListener&lt;/li>
&lt;li>DelimitedListTraceListener&lt;/li>
&lt;li>EventLogTraceListener&lt;/li>
&lt;li>EventSchemaTraceListener&lt;/li>
&lt;li>TextWriterTraceListener&lt;/li>
&lt;li>XmlWriterTraceListener&lt;/li>
&lt;li>eigene Implementierungen welche sich von TraceListener ableiten&lt;/li>
&lt;/ol>
&lt;p>Damit kann man ohne neu kompilieren des Assemblies einfach den Ausgabeort des Trace-Informationen verändern.&lt;/p></description></item><item><title>Einiges über IDisposable</title><link>https://www.alexander-koepke.de/post/2011-06-07-something-idisposable/</link><pubDate>Tue, 07 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-07-something-idisposable/</guid><description>&lt;p>Das Standard Interface IDisposable welches  zur &amp;ldquo;Freigabe&amp;rdquo; von Ressourcen in .Net dient ist recht Einfach:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#ff79c6">interface&lt;/span> &lt;span style="color:#50fa7b">IDisposable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">void&lt;/span> Dispose();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nur dieses Interface zu Implementieren reicht in vielen Fällen nicht aus. Es gibt z.B. einen FxCop Fehler &lt;a href="http://msdn.microsoft.com/en-us/library/ms244737(v=vs.80).aspx">Implement IDisposable correctly&lt;/a>, dieser erscheint u.a. bei non-sealed Klassen welche keinen Medthode mit der Signatur protected virtual Dispose(bool) besitzen.  IDisposable zu Implementieren wird nötig wenn man:&lt;/p>
&lt;ol>
&lt;li>unmanged (native) Ressourcen lädt um diese wieder freizugeben&lt;/li>
&lt;li>managed Felder besitzt, welche wiederum IDisposable implementieren&lt;/li>
&lt;/ol>
&lt;p>Im folgenden Beispiel zeigt eine (nach FxCop komplette Implementierung) einer Basis-Klasse  und einer Kind-Klasse:&lt;/p></description></item></channel></rss>