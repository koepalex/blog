<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://www.alexander-koepke.de/</link><description>Recent content on</description><generator>Hugo</generator><language>de-de</language><lastBuildDate>Wed, 07 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alexander-koepke.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Running OPC UA server simulation in dotnet aspire</title><link>https://www.alexander-koepke.de/post/2025-05-07_opcplc_aspire/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2025-05-07_opcplc_aspire/</guid><description>&lt;h1 id="simulating-an-opc-ua-server-with-net-aspire-and-opc-plc">Simulating an OPC UA Server with .NET Aspire and OPC PLC&lt;/h1>
&lt;p>Deploying an OPC UA server simulation is a common need during development and testing of industrial IoT applications.
Recently, a customer asked how to set up such a simulation using &lt;strong>.NET Aspire&lt;/strong>, in order to streamline development
workflows and easily monitor system components, logs, metrics, and inter-service communication.&lt;/p>
&lt;p>.NET Aspire provides an ideal environment for orchestrating microservices and dependencies, making it a great fit for
hosting a simulated OPC UA server. For the server simulation, I use the free and open-source
&lt;a href="https://github.com/Azure-Samples/iot-edge-opc-plc">OPC PLC&lt;/a> provided by Microsoft. While it&amp;rsquo;s possible to run the
server from source, I prefer using the containerized version published on the Microsoft Container Registry (MCR),
which integrates more easily into an Aspire-based solution.&lt;/p></description></item><item><title/><link>https://www.alexander-koepke.de/about/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/about/</guid><description>&lt;h2 id="about-me">About Me&lt;/h2>
&lt;p>I&amp;rsquo;m an software enthusiast which follows the paradigma of lifelong learning. Except from developing software I like to spend time with my kids, go swimming, listen to audiobooks/podcasts or play board-games, roleplay-games and computer-games with friends.&lt;/p>
&lt;p>Opinions are my own and not necessarily the point of view of my employer.&lt;/p>
&lt;h2 id="short-biography">Short Biography&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Company&lt;/th>
 &lt;th>From&lt;/th>
 &lt;th>To&lt;/th>
 &lt;th>Location&lt;/th>
 &lt;th>Highest Position&lt;/th>
 &lt;th>Exemplary Projects&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Siemens AG&lt;/td>
 &lt;td>2007&lt;/td>
 &lt;td>2018&lt;/td>
 &lt;td>Germany&lt;/td>
 &lt;td>Chief Architect&lt;/td>
 &lt;td>TIA Portal Hardware Configuration and Networks&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Siemens Information Systems Limited&lt;/td>
 &lt;td>2019&lt;/td>
 &lt;td>2019&lt;/td>
 &lt;td>India&lt;/td>
 &lt;td>Chief Architect&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Microsoft GmbH&lt;/td>
 &lt;td>2020&lt;/td>
 &lt;td>2024&lt;/td>
 &lt;td>Germany&lt;/td>
 &lt;td>Prinicipal Software Engineer&lt;/td>
 &lt;td>OPC Publisher, Azure IoT Operations&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Microsoft GmbH&lt;/td>
 &lt;td>2024&lt;/td>
 &lt;td>Present&lt;/td>
 &lt;td>Germany&lt;/td>
 &lt;td>OPC UA Lead Architect (Edge &amp;amp; Platform)&lt;/td>
 &lt;td>Spearheading the adaptive cloud schema integration from shopfloor to data platform&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="open-source-engagement">Open Source Engagement&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Orgranization&lt;/th>
 &lt;th>Repositories&lt;/th>
 &lt;th>Role&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>OPC Foundation&lt;/td>
 &lt;td>&lt;a href="https://github.com/OPCFoundation/UA-.NETStandard">UA-.NETStandard&lt;/a>, &lt;a href="https://github.com/OPCFoundation/UA-.NETStandard-Samples">UA-.NETStandard-Samples&lt;/a>&lt;/td>
 &lt;td>Reviewer, Contributor&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CloudEvents&lt;/td>
 &lt;td>&lt;a href="https://github.com/cloudevents/spec/">CloudEvents Spec&lt;/a>&lt;/td>
 &lt;td>Author of the extension for OPC UA&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="publications">Publications&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Title&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Publisher&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://www.alexander-koepke.de/publications/OMP-IIoT-Connectivity-White-Paper-20201207.pdf">Insights Into Connecting Industrial IoT Assets&lt;/a>&lt;/td>
 &lt;td>Whitepaper&lt;/td>
 &lt;td>Open Manufacturing Platform&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://www.alexander-koepke.de/publications/OMP-IIoT-Connectivity-Edge-Computing-20210701.pdf">Edge Computing in the Context of Open Manufacturing&lt;/a>&lt;/td>
 &lt;td>Whitepaper&lt;/td>
 &lt;td>Open Manufacturing Platform&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://www.plattform-i40.de/IP/Redaktion/EN/Downloads/Publikation/Details_of_the_Asset_Administration_Shell_Part1_V3.html">Details of the Asset Administration Shell - Part 1&lt;/a>&lt;/td>
 &lt;td>Specification&lt;/td>
 &lt;td>Platform Industry 4.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://www.plattform-i40.de/IP/Redaktion/EN/Downloads/Publikation/Details_of_the_Asset_Administration_Shell_Part2_V1.html">Details of the Asset Administration Shell - Part 2&lt;/a>&lt;/td>
 &lt;td>Specification&lt;/td>
 &lt;td>Platform Industry 4.0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="patents">Patents&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Title&lt;/th>
 &lt;th>ID&lt;/th>
 &lt;th>Date&lt;/th>
 &lt;th>Status&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://register.epo.org/application?number=EP19185732">Method for updating Software for an automation system, control device for an automation system and &lt;/a>&lt;/td>
 &lt;td>P19185732&lt;/td>
 &lt;td>11.07.2019&lt;/td>
 &lt;td>withdrawn&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Harnessing the Power of Small Language Models in Industrial IoT</title><link>https://www.alexander-koepke.de/post/2024-05-14_slm_for_industries/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2024-05-14_slm_for_industries/</guid><description>&lt;h1 id="harnessing-the-power-of-small-language-models-in-industrial-iot">Harnessing the Power of Small Language Models in Industrial IoT&lt;/h1>
&lt;p>The industrial Internet of Things (IIoT) is revolutionizing how industries operate, bringing connectivity and
data-driven insights to every corner of the manufacturing process. As IIoT devices proliferate, the need for robust,
efficient, and intelligent data processing becomes increasingly critical. This is where small language models come into
play, particularly in the context of intelligent edge scenarios where offline capabilities are paramount.&lt;/p></description></item><item><title>Enhancing Industrial IoT with Cloud Events</title><link>https://www.alexander-koepke.de/post/2024-04-05_opcua_cloudevents_extension/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2024-04-05_opcua_cloudevents_extension/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The Industrial Internet of Things (IIoT) is at the forefront of a significant
transformation in the manufacturing sector, driven by the convergence of
advanced technologies, hybrid intelligent edge solutions, and AI.
This evolution is not merely about adopting new technologies but about redefining
how manufacturing processes communicate, interact, and operate in a connected world.
This blog post explores these pivotal advancements, highlighting their role in
streamlining operations and fostering a more agile, efficient, and interconnected
manufacturing environment.&lt;/p></description></item><item><title>OPC UA Data Modelling</title><link>https://www.alexander-koepke.de/post/2024-03-20_opcua_compressor_modelling/</link><pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2024-03-20_opcua_compressor_modelling/</guid><description>&lt;p>In this comprehensive tutorial, we will explore the process of OPC UA data modelling. The tutorial will cover modeling a machine, creating an OPC UA server to simulate machinery values, reading data from the server and transmitting it downstream (e.g., to the cloud), and detecting anomalies.&lt;/p>
&lt;h2 id="what-is-opc-ua">What is OPC UA?&lt;/h2>
&lt;p>To answer this question, I like to cite Stefan Hoppe the President and Executive Director of the OPC Foundation:&lt;/p>
&lt;blockquote>
&lt;p>OPC Unified Architecture (OPC UA) is the information exchange standard for secure, reliable, manufacturer- and platform-independent industrial communications. It enables data exchange between products from different manufacturers and across operating systems. The OPC UA standard is based on specifications that were developed in close cooperation between manufacturers, users, research institutes and consortia, in order to enable consistent information exchange in heterogeneous systems.&lt;/p></description></item><item><title>Dotnet default stack size</title><link>https://www.alexander-koepke.de/post/2023-10-18-til-dotnet-stack-size/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2023-10-18-til-dotnet-stack-size/</guid><description>&lt;p>&lt;strong>T&lt;/strong>oday &lt;strong>I&lt;/strong> &lt;strong>L&lt;/strong>earned that the default stack size for threads in dotnet e.g. the ThreadPool threads is OS dependent. On Windows it is &lt;em>1.5 MiB&lt;/em>, on Linux, MacOs it is dependent on the concrete OS version. To determine the actual default thread size you have to run &lt;code>ulimit -s&lt;/code>. For Ubuntu 22.04 it is &lt;em>8192 bytes&lt;/em> and for macOS 14.2 it is &lt;em>8176 bytes&lt;/em>.&lt;/p>
&lt;p>It is possible to configure the default stack size via environment variable e.g. to set the stack to 1.5Mib set &lt;code>DOTNET_DefaultStackSize=180000&lt;/code> (the value is interpreted as hex).&lt;/p></description></item><item><title>Zeit-Trennzeichen bei DateTime</title><link>https://www.alexander-koepke.de/post/2016-07-14-zeit-trennzeichen-bei-datetime/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2016-07-14-zeit-trennzeichen-bei-datetime/</guid><description>&lt;p>Diese Woche hat es das .NET geschafft mich zu überraschen, ein Programm ist beim Kunden mit italienischen Windows immer wieder abgestürzt. Nach langem Suchen hat ein Kollege das Problem erkannt, was durch das folgende Beispiel veranschaulicht wird:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> ci = &lt;span style="color:#ff79c6">new&lt;/span> CultureInfo(&lt;span style="color:#f1fa8c">&amp;#34;it-IT&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> dateTime = DateTime.Now;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> str = dateTime.ToString(&lt;span style="color:#f1fa8c">&amp;#34;dd.mm.yyyy hh:mm:ss&amp;#34;&lt;/span>, ci);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(str);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ausgabe (.NET 3.5): 14.07.2016 &lt;strong>20.45.30&lt;/strong>&lt;br>
Ausgabe (.NET 4.0): 14.07.2016 &lt;strong>20:45:30&lt;/strong>&lt;/p>
&lt;p>In der Ausgabe erkennt man, dass abhängig von der .NET Version, das Zeit-Trennzeichen ändert. Aber warum wird das Trennzeichen überhaupt verändert, es wurde doch eine feste Format-Zeichenkette angegeben? Die &lt;a href="https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx#escape">Dokumentation&lt;/a> beschreibt:&lt;br>
The &amp;ldquo;d&amp;rdquo;, &amp;ldquo;f&amp;rdquo;, &amp;ldquo;F&amp;rdquo;, &amp;ldquo;g&amp;rdquo;, &amp;ldquo;h&amp;rdquo;, &amp;ldquo;H&amp;rdquo;, &amp;ldquo;K&amp;rdquo;, &amp;ldquo;m&amp;rdquo;, &amp;ldquo;M&amp;rdquo;, &amp;ldquo;s&amp;rdquo;, &amp;ldquo;t&amp;rdquo;, &amp;ldquo;y&amp;rdquo;, &amp;ldquo;z&amp;rdquo;, &lt;strong>&amp;quot;:&amp;quot;&lt;/strong>, or &amp;ldquo;/&amp;rdquo; characters in a format string are interpreted as custom format specifiers rather than as literal characters. To prevent a character from being interpreted as a format specifier, you can precede it with a backslash (\), which is the escape character.&lt;/p></description></item><item><title>Performance Vortrag aus 2015</title><link>https://www.alexander-koepke.de/post/2016-06-13-performance-vortrag-aus-2015/</link><pubDate>Mon, 13 Jun 2016 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2016-06-13-performance-vortrag-aus-2015/</guid><description>&lt;p>Letztes Jahr habe ich einen Vortrag zum Thema Performance gehalten, der Vermitteln sollte warum dieses Thema jeden (.NET-)Entwickler betrifft.&lt;/p>
&lt;p>Nachdem ich mir jetzt die Zeit genommen habe um auch die Sprechernotizen aka &amp;ldquo;Tonspur&amp;rdquo; auf zuschreiben, konnte ich den Vortrag online stellen:&lt;/p>
&lt;p>&lt;a href="https://github.com/koepalex/performance_talk_2015">https://github.com/koepalex/performance_talk_2015&lt;/a>&lt;/p>
&lt;p>Vielleicht ist der Vortrag für jemanden Hilfreich :)&lt;/p></description></item><item><title>AutoHotkey</title><link>https://www.alexander-koepke.de/post/2014-01-05-autohotkey/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2014-01-05-autohotkey/</guid><description>&lt;p>Durch Scott Hanselman’s Blog Artikel &lt;a href="http://www.hanselman.com/blog/ScottHanselmans2014UltimateDeveloperAndPowerUsersToolListForWindows.aspx">2014 Ultimate Developer and Power Users Tool List for Windows&lt;/a>. bin ich auf &lt;strong>&lt;a href="http://www.autohotkey.com">AutoHotkey&lt;/a>&lt;/strong> aufmerksam geworden. Es biete wie AppleScript unter Mac OS X, die Möglichkeit verschiedene (lästige) Aufgaben zu automatisieren bzw. Programme um Funktionalitäten zu erweitern.&lt;/p>
&lt;hr>
&lt;p>Damit könnte man zum Beispiel einen beliebiges Programm mit einer Eingabemaske um &lt;em>Snippets&lt;/em> erweitern. Als Besonderheit können AutoHotkey-Skript auch in eine ausführbare Datei kompiliert werden und somit auf Rechnern ohne AutoHotkey verwendet werden.&lt;/p></description></item><item><title>Debugging von Performance Problemen in .NET</title><link>https://www.alexander-koepke.de/post/2013-11-27-debugging-von-performance-problemen-in-net/</link><pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-11-27-debugging-von-performance-problemen-in-net/</guid><description>&lt;p>Die Analyse von Speicherproblemen ist eine Aufgabe die bei großen .NET Anwendungen häufiger vorkommt. In C++ wurde gesucht, wer welche Speicherblöcke angefordert und nicht wieder freigegeben hat und im .NET Umfeld wird eben gesucht warum der Gabarge-Collector den Speicher nicht freigeben kann. Oder man sucht warum einige Benutzeraktionen besonders lange benötigen. Für die Analyse gibt es eine ganze Reihe guter kommerzieller Programme, auf diese möchte ich jedoch nicht eingehen, sondern ein paar kostenlosen Alternativen vorstellen.&lt;/p></description></item><item><title>Neues vom GC in .NET 4.0 und 4.5</title><link>https://www.alexander-koepke.de/post/2013-10-21-neues-vom-gc-in-net-4-0-und-4-5/</link><pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-10-21-neues-vom-gc-in-net-4-0-und-4-5/</guid><description>&lt;p>Heute möchte ich etwas über Erneuerungen im .NET 4.0 / 4.5 sprechen. Das genannte bezieht sich auf den Workstation Garbage-Collector. Die Informationen für den Server Garbage-Collector entnehmen sie bitte den Links. Beginnen wir jedoch zunächst mit einer kurzen Auffrischung.&lt;/p>
&lt;h3 id="wiederholung">Wiederholung&lt;/h3>
&lt;p>Das .NET Framework unterteilt seinen Heap in verschiedene Generationen.&lt;/p>
&lt;ul>
&lt;li>In der &lt;strong>Gen0&lt;/strong> werden fast alle Objekte erstellt. Die Anfangsgröße beträgt rund 256KB.&lt;/li>
&lt;li>In der &lt;strong>Gen1&lt;/strong> werden Objekte gespeichert die &lt;em>eine&lt;/em> Garbage-Collection überlebt haben. Die Anfangsgröße beträgt rund 2 MB.&lt;/li>
&lt;li>In der &lt;strong>Gen2&lt;/strong> werden Objekte gespeichert die &lt;em>mehr als eine&lt;/em> Garbage-Collection überlebt haben Die Anfangsgröße beträgt 10 MB.&lt;/li>
&lt;/ul>
&lt;p>Die soeben genannten Anfangsgrößen können zur Laufzeit variiert werden. Am stärksten wird sich i.A. die Größe der Gen2 verändern (wachsen), da die Gen2 als &lt;em>Endlager&lt;/em> für alle länger benötigten Objekte dient.&lt;/p></description></item><item><title>GetHashCode dein Freund und Sorgenkind</title><link>https://www.alexander-koepke.de/post/2013-10-20-gethashcode-dein-freund-und-sorgenkind/</link><pubDate>Sun, 20 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-10-20-gethashcode-dein-freund-und-sorgenkind/</guid><description>&lt;p>Eine wichtige Methode beim Arbeiten im .NET Umfeld ist GetHashCode. Sie gibt einen 32 Bit Integer zurück der das Objekt identifizieren soll. Der Hash-Code beschreibt also die Identität des Objektes (im Gegensatz zur Speicherreferenz auf das Objekt).&lt;/p>
&lt;p>Daraus leitet sich die Frage ab &lt;em>Wann zwei Objekte die selbe Identität besitzen?&lt;/em> Im Falle einer Object-Relational-Mapper Klasse beispielsweise, wenn die Instanzen der O/R-Mapper Klasse auf ein und die selbe Zeile(n) der selben Tabelle(n) der selben Datenbank(en) verweisen. Klassischer weise durch eine Kette von Primary-Keys. Der Hash-Code ist auch ein Sorgenkind eines Entwicklers da schon hier die Probleme beginnen. Eine einfach Implementierungen könnte sein:&lt;/p></description></item><item><title>Muss es immer die 100% Lösung sein?</title><link>https://www.alexander-koepke.de/post/2013-10-14-muss-es-immer-die-100-losung-sein/</link><pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-10-14-muss-es-immer-die-100-losung-sein/</guid><description>&lt;p>Ich behaupte einfach mal, dass man sich in der Softwareentwicklung schnell in zu aufwendigen Lösungen verliert. Zumindest mir geht es regelmäßig so, ich habe einiges an Software entwickelt und Artikel geschrieben die nie veröffentlicht wurden (obwohl sie dafür gedacht waren). Der Grund für die nicht Veröffentlichung war, dass sie meiner Meinung nach nicht komplett waren oder meinen eigenen Ansprüchen nicht genügten.&lt;/p>
&lt;p>Das soll nicht bedeutet das die Artikel zu schreiben oder die Software zu entwickeln Zeitverschwendung war. Ganz im Gegenteil es ist immer beeindruckend wie viel man lernen kann, sobald man sich mit etwas anderen beschäftigt als den Arbeitsthemen. Die dabei gewonnenen Erkenntnisse sind, vielleicht auch für andere Interessant (ist schon ab und zu vorgekommen &lt;em>;)&lt;/em>). Daher resultiert für mich die Frage &lt;strong>Muss es immer die 100% Lösung sein?&lt;/strong> wobei die simple Antwort &lt;strong>Nein&lt;/strong> ist. Um Unklarheiten vorzubeugen damit ist nicht gemeint, dass man nur 80% der Anforderungen erfüllen soll. Vielmehr geht es um Erkenntnisaustausch/-gewinn.&lt;/p></description></item><item><title>Pipe aus eigenen Programmen nutzen</title><link>https://www.alexander-koepke.de/post/2013-10-13-pipe-aus-eigenen-programmen-nutzen/</link><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-10-13-pipe-aus-eigenen-programmen-nutzen/</guid><description>&lt;p>Mittels der von Unix Systemen bekannten Pipe (&lt;em>|&lt;/em>) ist es auch unter Windows (via CMD-Line) möglich einzelne Kommandos zu verbinden. Die Pipe ermöglicht es die Ausgabe vom dem vorherigen Kommando direkt als Input des aktuellen Kommandos zu verwenden. Beispielsweise den Inhalt einer Datei einem Skript zu übergeben: &lt;code>type input.md | perl Markdown.pl &amp;gt; output.html&lt;/code>&lt;/p>
&lt;p>Logisch gesehen Ersetzt der Inhalt der Pipe ein einzelnes Konsolen-Argument. Um diese Funktionalität auch in den eigenen (Konsolen-) Programme verwenden zu können, sind im Allgemeinen nur zwei Erweiterungen notwendig.&lt;/p></description></item><item><title>Eindruck und Gedanken zu Mac OS X</title><link>https://www.alexander-koepke.de/post/2013-08-24-eindruck-und-gedanken-zu-mac-os-x/</link><pubDate>Sat, 24 Aug 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-08-24-eindruck-und-gedanken-zu-mac-os-x/</guid><description>&lt;p>Durch den Wunsch ein neues Notebook zu kaufen, stand ich vor der Wahl Linux, Windows oder Mac OS X. Da ich auf Arbeit Windows einsetze und früher in meiner Freizeit viel mit Linux (Ubuntu, Debian,  Linux Mint, Fedora) bzw. BSD (FreeBSD) gearbeitet habe ist die Wahl des Betriebssystems auf Mac OS X gefallen. Und die Wahl der Hardware auf ein Mac Book Pro 13,3&amp;quot; gefallen. Ich gebe zu das es mich immer interessiert hat zu Erfahren, warum Niemanden den ich kenne, sein Mac OS X Gerät missen möchte. In diesem Beitrag werde ich etwas über meinen Ersten Eindruck erzählen.&lt;/p></description></item><item><title>Immutable Objects am Beispiel von Passwort Hantierung in Java</title><link>https://www.alexander-koepke.de/post/2013-03-02-immutable-objects-am-beispiel-von-passwort-hantierung-in-java/</link><pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-03-02-immutable-objects-am-beispiel-von-passwort-hantierung-in-java/</guid><description>&lt;p>In Java sind Strings „Immutable Objects“ (unveränderliche Objekte),&lt;br>
dass bedeutet sie werden zur Laufzeit nicht mehr geändert.  Immutables Objects haben viele Vorteile:&lt;/p>
&lt;ul>
&lt;li>im Allgemeinen ist es einfach möglich zu parallelisieren&lt;/li>
&lt;li>Implementierung von Undo- und Redo-Funktionalitäten sind normalerweise einfach (z.B. mittels Memento-Pattern)&lt;/li>
&lt;li>James Gosling (einer der Erfinder von Java), gibt zusätzlich an, dass bei Immutable Objects es grundsätzlich möglich ist, Ergebnisse zu Cachen und das die Sicherheit wird erhöht. (vgl. &lt;a href="https://www.artima.com/intv/gosling313.html">https://www.artima.com/intv/gosling313.html&lt;/a> )&lt;/li>
&lt;/ul>
&lt;p>Sicherheit ist ein gutes Stichwort, denn Immutable Objects können auch Sicherheitsprobleme mit sich bringen. Schauen wir uns einmal Passwörter bei Java an. Diese sollten niemals in einem String gespeichert werden, da sie solange der String im Speicher existiert, im Klartext im Speicher stehen. Die allgemeine Empfehlung in verschiedenen Security Guides lautet daher Passwörter nur als Char-Array zu hantieren und sobald man das Passwort nicht mehr benötigt, den Inhalt dieses Array zu überschreiben. Überschreiben funktioniert mit Immutable Objects nicht, was ein Passwort in einem String zu einem Sicherheitsrisiko werden lässt.&lt;/p></description></item><item><title>Ermitteln des PID (Processidentifier) des Vaterprozesses</title><link>https://www.alexander-koepke.de/post/2012-10-14-ermitteln-des-pid-processidentifier-des-vaterprozesses/</link><pubDate>Sun, 14 Oct 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-10-14-ermitteln-des-pid-processidentifier-des-vaterprozesses/</guid><description>&lt;p>In manchen Fällen ist es notwendig heraus zu finden, welches der Vaterprozess eines Prozesses ist. Dafür gibt es im Allgemeinen drei verschiedene Lösungen im Windows .NET Umfeld.&lt;/p>
&lt;p>Die häufigste Lösung ist die Verwendung von &lt;strong>Performancecountern&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">var&lt;/span> process = FindProcess(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">using&lt;/span> (&lt;span style="color:#8be9fd">var&lt;/span> pC = &lt;span style="color:#ff79c6">new&lt;/span> PerformanceCounter(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Process&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;Creating Process ID&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">string&lt;/span>.Format(&lt;span style="color:#f1fa8c">&amp;#34;{0}#{1}&amp;#34;&lt;/span>, process.ProcessName, &lt;span style="color:#bd93f9">1&lt;/span>),   
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process.MachineName)) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> pid = (&lt;span style="color:#8be9fd">int&lt;/span>)pC.NextValue(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#f1fa8c">&amp;#34;parent pid = {0}&amp;#34;&lt;/span>, pid); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die Verwendung von Performancecountern im Allgemeinen kann zwei mögliche Nachteile haben:&lt;/p></description></item><item><title>DSLs, Extension Methods und Fluent Interfaces</title><link>https://www.alexander-koepke.de/post/2012-07-28-dsls-extension-methods-und-fluent-interfaces/</link><pubDate>Sat, 28 Jul 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-07-28-dsls-extension-methods-und-fluent-interfaces/</guid><description>&lt;p>In den letzten Jahren wurde in der Softwareentwicklung viel über Domänenspezifische Sprachen (domain specific language, kurz: DSLs) geschrieben. DSLs sollen von einem Domänenexperten gelesen werden können, auch ohne das die Domänenexperten über Programmierkenntnisse verfügen. DSLs können auch Entwicklern helfen die Quelltexte leserlicher zu machen, sowie Fehler zu vermeiden. Die Quelltextzeile:&lt;/p>
&lt;blockquote>
&lt;p>if (!SessionEstablished)&lt;/p>&lt;/blockquote>
&lt;p>Ist einfach verständlich (für diejenigen welche eine C ähnliche Syntax verstehen), als Alternative könnte folgende Quelltextzeile dienen:&lt;/p></description></item><item><title>Inversion Of Control(-Container), Service Locator und Dependency Injection</title><link>https://www.alexander-koepke.de/post/2012-06-08-inversion-of-control-container-service-locator-und-dependency-injection/</link><pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-06-08-inversion-of-control-container-service-locator-und-dependency-injection/</guid><description>&lt;p>IOC-Container und DI sind zurzeit in vielen Fachzeitschriften diskutiert. Hier der Versuch einer kompakte Übersicht, die IOC, DI, SL und IOC-Container im Zusammenspiel erklärt.&lt;/p>
&lt;p>&lt;strong>&lt;em>Inversion Of Control&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Beschreibt ein Paradigma zum Entwerfen von Frameworks. Ein Unterschied zwischen einem Framework und einer Bibliothek besteht darin, dass in einem Framework Methoden vom Verwender des Framework aufgerufen werden. Dies verändert den Kontrollfluss, bei einer klassischen Bibliothek, ruft der Verwender eine Methode auf, deren Funktionalität wird abgearbeitet und die Methode kehrt zum Aufrufer zurück. Die Steuerung des Kontrollflusses liegt also in der Hand des Verwenders der Bibliothek. Ein gutes Beispiel ist das .NET Framework, der Verwender kann Methoden über Events an Ereignisse binden, dass .NET Framework entscheidet, wann es die Funktionalität des Verwenders aufruft.&lt;/p></description></item><item><title>Vermeidung von switch-case zur Typen Bestimmung beim Aufruf von generischen Methoden</title><link>https://www.alexander-koepke.de/post/2012-04-20-vermeidung-von-switch-case-zur-typen-bestimmung-beim-aufruf-von-generischen-methoden-3/</link><pubDate>Fri, 20 Apr 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-04-20-vermeidung-von-switch-case-zur-typen-bestimmung-beim-aufruf-von-generischen-methoden-3/</guid><description>&lt;p>In der Entwicklung mit .NET hat man öfter folgendes Problem:&lt;/p>
&lt;p>Methoden sind generisch implementiert und zu verwendende Objekte sind nur in Form von Referenzen auf Basistypen vorhanden (z.B. System.Array, System.Object). Diese Referenzen können nicht direkt an generische Methode übergeben werden (ergibt einen Compile Fehler).&lt;/p>
&lt;p>Häufig liegen daher Typinformationen als String vor (über FullName-Property, aus Konfigurationsdatei, …). Diese Informationen werden anschließend verwendet, um den Typ der Referenz über switch-case aufzulösen.&lt;/p>
&lt;p>Zum Beispiel:&lt;/p></description></item><item><title>UnauthorizedAccessException beim Kopieren einer Datei</title><link>https://www.alexander-koepke.de/post/2011-11-07-unauthorizedaccessexception-beim-kopieren-einer-datei/</link><pubDate>Mon, 07 Nov 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-11-07-unauthorizedaccessexception-beim-kopieren-einer-datei/</guid><description>&lt;p>Kopieren, verschieben, umbenennen und löschen von Dateien gehören zu häufigen Aufgaben eines Softwareentwicklers. In diesem Beitrag sollen ein paar Dinge aufgezeigt werden die einem beim kopieren von Datein vielleicht nicht bewusst sind. Wie kopiert man jetzt am besten eine Datei? Eine Variante ist die statische Methode der Klasse File:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>File.Copy(“C:\\input\\test.bmp“, “C:\\output\\test.bmp“, &lt;span style="color:#ff79c6">true&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Damit man sich Überprüfungen wie ob die Datei bereits existiert (File.Exist()) sparen kann, wird die Überladung der Copy-Methode verwendet, welche bestehende Dateien überschreibt. Solange man die Software nur mit administrativen Rechten betreibt, hat man alles richtig gemacht. Muss die Software auch mit Benutzer Rechten arbeiten, kann man hier eine UnauthorizedAccessException bekommen. Dies würde zum Beispiel eintreten wenn eine schreibgeschützte Datei, bereits im Zielverzeichnis existiert und erneut in dieses Verzeichnis kopiert werden soll. Die .Net Implementierung der Copy-Methode fordert Berechtigungen on demand an, das bedeutet erst, wenn besondere Zugriffsrechte benötigt werden, werden diese angefordert. Als Benutzer hat man aber nicht die benötigten Rechte um schreibgeschützte Dateien zu überschreiben. Um diesen speziellen Fall zu lösen, könnte man nach dem kopieren die Attribute der Datei verändern (dafür genügen die Benutzer Rechte):&lt;/p></description></item><item><title>WPF RichTextBox mit Durchgestrichenden Text</title><link>https://www.alexander-koepke.de/post/2011-06-18-wpf-richtextbox-mit-durchgestrichenden-text/</link><pubDate>Sat, 18 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-18-wpf-richtextbox-mit-durchgestrichenden-text/</guid><description>&lt;p>Um bei einer WPF RichTextBox einen Text &lt;strong>Fett&lt;/strong>, &lt;em>Kursiv&lt;/em> oder Unterstrichen darzustellen ist nicht viel notwenig. Eigentlich muss man im XAML nur einen (Toggle)Button definieren, der ein Kommando (EditingCommands) an die RichTextBox sendet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;ToggleButton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Command=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;EditingCommands.ToggleItalic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">CommandTarget=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;{Binding ElementName=myRichTextBox}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Content=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Italic&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;RichTextBox/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Genauso einfach verhält es sich einen Text Hochgestellt oder Tiefgestellt darzustellen, mann muss nur zusätzlich noch die Schrift-Familie des Hinter der RichTextBox liegenden Dokumentes verändern:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;ToggleButton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Command=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;EditingCommands.ToggleSubscript&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">CommandTarget=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;{Binding ElementName=myRichTextBox}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Content=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Subscript&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;RichTextBox/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">&amp;lt;!--on default fontfamily subscript and superscript dont work!!--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;lt;FlowDocument&lt;/span> &lt;span style="color:#50fa7b">FontFamily=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Palatino Linotype&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">FontSize=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;14&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;/RichTextBox&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die Veränderungen an dem Text funktionieren in zwei Modi:&lt;/p></description></item><item><title>Events über Threadgrenzen</title><link>https://www.alexander-koepke.de/post/2011-06-10-events-uber-threadgrenzen/</link><pubDate>Fri, 10 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-10-events-uber-threadgrenzen/</guid><description>&lt;p>Die meisten Tools/Programme verrichten Ihre Arbeit in Threads um die Oberfläche (UI) nicht zu blockieren. Eine &amp;ldquo;Kommunikations-Möglichkeit&amp;rdquo; um die UI beim Eintreten von bestimmten Gegebenheiten zu benachrichtigen sind Events. Ein Event im .Net ruft seine Ziele (InvokationList) aus dem Thread auf, aus dem es &amp;ldquo;gefeuert&amp;rdquo; wird. UI Controls, können i.A. nur im Mainthread arbeiten. Einen Zugriff aus einen anderen Thread führt zu einer Exception. Über das Interface ISynchronizedInvoke (implementiert von allen .Net UI Controls):&lt;/p></description></item><item><title>Tracing/Logging und die Config-Datei</title><link>https://www.alexander-koepke.de/post/2011-06-08-tracinglogging-config-file/</link><pubDate>Wed, 08 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-08-tracinglogging-config-file/</guid><description>&lt;p>Logging von Informationen ist so gut wie in jedem Programm notwendig. Nicht alle Entwickler können oder wollen ein professionelles Log-Tool wie z.B. &lt;a href="http://logging.apache.org/log4net/index.html">log4net&lt;/a> oder &lt;a href="http://nlog-project.org/">nlog&lt;/a> verwenden. In vielen Fällen reichen auch Debug.WriteLine oder Trace.WriteLine (letztes schreibt auch wenn die Software im Modus „Release“ kompiliert wurde).&lt;/p>
&lt;p>Über eine Config-Datei lassen sich u.a. verschiedene TraceListener auswählen:&lt;/p>
&lt;ol>
&lt;li>ConsoleTraceListener&lt;/li>
&lt;li>DefaultTraceListener&lt;/li>
&lt;li>DelimitedListTraceListener&lt;/li>
&lt;li>EventLogTraceListener&lt;/li>
&lt;li>EventSchemaTraceListener&lt;/li>
&lt;li>TextWriterTraceListener&lt;/li>
&lt;li>XmlWriterTraceListener&lt;/li>
&lt;li>eigene Implementierungen welche sich von TraceListener ableiten&lt;/li>
&lt;/ol>
&lt;p>Damit kann man ohne neu kompilieren des Assemblies einfach den Ausgabeort des Trace-Informationen verändern.&lt;/p></description></item><item><title>Einiges über IDisposable</title><link>https://www.alexander-koepke.de/post/2011-06-07-something-idisposable/</link><pubDate>Tue, 07 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-07-something-idisposable/</guid><description>&lt;p>Das Standard Interface IDisposable welches  zur &amp;ldquo;Freigabe&amp;rdquo; von Ressourcen in .Net dient ist recht Einfach:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#ff79c6">interface&lt;/span> &lt;span style="color:#50fa7b">IDisposable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">void&lt;/span> Dispose();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nur dieses Interface zu Implementieren reicht in vielen Fällen nicht aus. Es gibt z.B. einen FxCop Fehler &lt;a href="http://msdn.microsoft.com/en-us/library/ms244737(v=vs.80).aspx">Implement IDisposable correctly&lt;/a>, dieser erscheint u.a. bei non-sealed Klassen welche keinen Medthode mit der Signatur protected virtual Dispose(bool) besitzen.  IDisposable zu Implementieren wird nötig wenn man:&lt;/p>
&lt;ol>
&lt;li>unmanged (native) Ressourcen lädt um diese wieder freizugeben&lt;/li>
&lt;li>managed Felder besitzt, welche wiederum IDisposable implementieren&lt;/li>
&lt;/ol>
&lt;p>Im folgenden Beispiel zeigt eine (nach FxCop komplette Implementierung) einer Basis-Klasse  und einer Kind-Klasse:&lt;/p></description></item><item><title/><link>https://www.alexander-koepke.de/search/placeholder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/search/placeholder/</guid><description/></item></channel></rss>