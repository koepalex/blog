<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>custom-rule on</title><link>https://koepalex.github.io/blog/tags/custom-rule/</link><description>Recent content in custom-rule on</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Sun, 13 May 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://koepalex.github.io/blog/tags/custom-rule/index.xml" rel="self" type="application/rss+xml"/><item><title>FxCop Dispose von lokalen Variablen</title><link>https://koepalex.github.io/blog/post/2012-05-13-fxcop-dispose-von-lokalen-variablen/</link><pubDate>Sun, 13 May 2012 00:00:00 +0000</pubDate><guid>https://koepalex.github.io/blog/post/2012-05-13-fxcop-dispose-von-lokalen-variablen/</guid><description>Die Freigabe von Ressourcen (verwaltet und nativ) wird im .Net mittels Implementierung der IDisposable Schnittstelle (bzw. Anwendung des IDisposable Patterns realisiert). Der Aufruf der Dispose-Methode ist so wichtig, dass Microsoft spezielle FxCop Regeln implementiert hat (FxCop ist ein Tool zur statischen Analyse von .Net Assemblys). Die Regel „Disposable fields should be disposed“ (CA2213) besagt, dass eine Klasse welche Member enthält, die IDisposable implementieren, selber IDisposable implementieren soll. In der eigenen Dispose-Methode, werden dann die Dispose-Methoden der Members aufgerufen.</description></item></channel></rss>