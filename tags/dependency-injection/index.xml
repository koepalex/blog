<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dependency-injection on</title><link>https://www.alexander-koepke.de/tags/dependency-injection/</link><description>Recent content in dependency-injection on</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Fri, 08 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alexander-koepke.de/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml"/><item><title>Inversion Of Control(-Container), Service Locator und Dependency Injection</title><link>https://www.alexander-koepke.de/post/2012-06-08-inversion-of-control-container-service-locator-und-dependency-injection/</link><pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2012-06-08-inversion-of-control-container-service-locator-und-dependency-injection/</guid><description>IOC-Container und DI sind zurzeit in vielen Fachzeitschriften diskutiert. Hier der Versuch einer kompakte Übersicht, die IOC, DI, SL und IOC-Container im Zusammenspiel erklärt.
Inversion Of Control
Beschreibt ein Paradigma zum Entwerfen von Frameworks. Ein Unterschied zwischen einem Framework und einer Bibliothek besteht darin, dass in einem Framework Methoden vom Verwender des Framework aufgerufen werden. Dies verändert den Kontrollfluss, bei einer klassischen Bibliothek, ruft der Verwender eine Methode auf, deren Funktionalität wird abgearbeitet und die Methode kehrt zum Aufrufer zurück.</description></item></channel></rss>