<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>event on</title><link>https://alexander-koepke.de/blog/tags/event/</link><description>Recent content in event on</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Fri, 10 Jun 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://alexander-koepke.de/blog/tags/event/index.xml" rel="self" type="application/rss+xml"/><item><title>Events über Threadgrenzen</title><link>https://alexander-koepke.de/blog/post/2011-06-10-events-uber-threadgrenzen/</link><pubDate>Fri, 10 Jun 2011 00:00:00 +0000</pubDate><guid>https://alexander-koepke.de/blog/post/2011-06-10-events-uber-threadgrenzen/</guid><description>Die meisten Tools/Programme verrichten Ihre Arbeit in Threads um die Oberfläche (UI) nicht zu blockieren. Eine &amp;ldquo;Kommunikations-Möglichkeit&amp;rdquo; um die UI beim Eintreten von bestimmten Gegebenheiten zu benachrichtigen sind Events. Ein Event im .Net ruft seine Ziele (InvokationList) aus dem Thread auf, aus dem es &amp;ldquo;gefeuert&amp;rdquo; wird. UI Controls, können i.A. nur im Mainthread arbeiten. Einen Zugriff aus einen anderen Thread führt zu einer Exception. Über das Interface ISynchronizedInvoke (implementiert von allen .</description></item></channel></rss>