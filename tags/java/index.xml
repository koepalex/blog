<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on</title><link>https://alexander-koepke.de/tags/java/</link><description>Recent content in java on</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Sat, 02 Mar 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://alexander-koepke.de/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Immutable Objects am Beispiel von Passwort Hantierung in Java</title><link>https://alexander-koepke.de/post/2013-03-02-immutable-objects-am-beispiel-von-passwort-hantierung-in-java/</link><pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate><guid>https://alexander-koepke.de/post/2013-03-02-immutable-objects-am-beispiel-von-passwort-hantierung-in-java/</guid><description>In Java sind Strings „Immutable Objects“ (unveränderliche Objekte),
dass bedeutet sie werden zur Laufzeit nicht mehr geändert. Immutables Objects haben viele Vorteile:
im Allgemeinen ist es einfach möglich zu parallelisieren Implementierung von Undo- und Redo-Funktionalitäten sind normalerweise einfach (z.B. mittels Memento-Pattern) James Gosling (einer der Erfinder von Java), gibt zusätzlich an, dass bei Immutable Objects es grundsätzlich möglich ist, Ergebnisse zu Cachen und das die Sicherheit wird erhöht. (vgl. https://www.artima.com/intv/gosling313.html ) Sicherheit ist ein gutes Stichwort, denn Immutable Objects können auch Sicherheitsprobleme mit sich bringen.</description></item></channel></rss>