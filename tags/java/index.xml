<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on</title><link>https://www.alexander-koepke.de/tags/java/</link><description>Recent content in Java on</description><generator>Hugo</generator><language>de-de</language><lastBuildDate>Sat, 02 Mar 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alexander-koepke.de/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Immutable Objects am Beispiel von Passwort Hantierung in Java</title><link>https://www.alexander-koepke.de/post/2013-03-02-immutable-objects-am-beispiel-von-passwort-hantierung-in-java/</link><pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2013-03-02-immutable-objects-am-beispiel-von-passwort-hantierung-in-java/</guid><description>&lt;p>In Java sind Strings „Immutable Objects“ (unveränderliche Objekte),&lt;br>
dass bedeutet sie werden zur Laufzeit nicht mehr geändert.  Immutables Objects haben viele Vorteile:&lt;/p>
&lt;ul>
&lt;li>im Allgemeinen ist es einfach möglich zu parallelisieren&lt;/li>
&lt;li>Implementierung von Undo- und Redo-Funktionalitäten sind normalerweise einfach (z.B. mittels Memento-Pattern)&lt;/li>
&lt;li>James Gosling (einer der Erfinder von Java), gibt zusätzlich an, dass bei Immutable Objects es grundsätzlich möglich ist, Ergebnisse zu Cachen und das die Sicherheit wird erhöht. (vgl. &lt;a href="https://www.artima.com/intv/gosling313.html">https://www.artima.com/intv/gosling313.html&lt;/a> )&lt;/li>
&lt;/ul>
&lt;p>Sicherheit ist ein gutes Stichwort, denn Immutable Objects können auch Sicherheitsprobleme mit sich bringen. Schauen wir uns einmal Passwörter bei Java an. Diese sollten niemals in einem String gespeichert werden, da sie solange der String im Speicher existiert, im Klartext im Speicher stehen. Die allgemeine Empfehlung in verschiedenen Security Guides lautet daher Passwörter nur als Char-Array zu hantieren und sobald man das Passwort nicht mehr benötigt, den Inhalt dieses Array zu überschreiben. Überschreiben funktioniert mit Immutable Objects nicht, was ein Passwort in einem String zu einem Sicherheitsrisiko werden lässt.&lt;/p></description></item></channel></rss>