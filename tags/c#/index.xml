<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on</title><link>https://www.alexander-koepke.de/tags/c%23/</link><description>Recent content in C# on</description><generator>Hugo</generator><language>de-de</language><lastBuildDate>Sat, 18 Jun 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alexander-koepke.de/tags/c%23/index.xml" rel="self" type="application/rss+xml"/><item><title>WPF RichTextBox mit Durchgestrichenden Text</title><link>https://www.alexander-koepke.de/post/2011-06-18-wpf-richtextbox-mit-durchgestrichenden-text/</link><pubDate>Sat, 18 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-18-wpf-richtextbox-mit-durchgestrichenden-text/</guid><description>&lt;p>Um bei einer WPF RichTextBox einen Text &lt;strong>Fett&lt;/strong>, &lt;em>Kursiv&lt;/em> oder Unterstrichen darzustellen ist nicht viel notwenig. Eigentlich muss man im XAML nur einen (Toggle)Button definieren, der ein Kommando (EditingCommands) an die RichTextBox sendet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;ToggleButton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Command=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;EditingCommands.ToggleItalic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">CommandTarget=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;{Binding ElementName=myRichTextBox}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Content=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Italic&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;RichTextBox/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Genauso einfach verhält es sich einen Text Hochgestellt oder Tiefgestellt darzustellen, mann muss nur zusätzlich noch die Schrift-Familie des Hinter der RichTextBox liegenden Dokumentes verändern:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;ToggleButton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Command=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;EditingCommands.ToggleSubscript&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">CommandTarget=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;{Binding ElementName=myRichTextBox}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">Content=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Subscript&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;RichTextBox/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">&amp;lt;!--on default fontfamily subscript and superscript dont work!!--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">&amp;lt;FlowDocument&lt;/span> &lt;span style="color:#50fa7b">FontFamily=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;Palatino Linotype&amp;#34;&lt;/span> &lt;span style="color:#50fa7b">FontSize=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;14&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&amp;lt;/RichTextBox&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die Veränderungen an dem Text funktionieren in zwei Modi:&lt;/p></description></item><item><title>Events über Threadgrenzen</title><link>https://www.alexander-koepke.de/post/2011-06-10-events-uber-threadgrenzen/</link><pubDate>Fri, 10 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-10-events-uber-threadgrenzen/</guid><description>&lt;p>Die meisten Tools/Programme verrichten Ihre Arbeit in Threads um die Oberfläche (UI) nicht zu blockieren. Eine &amp;ldquo;Kommunikations-Möglichkeit&amp;rdquo; um die UI beim Eintreten von bestimmten Gegebenheiten zu benachrichtigen sind Events. Ein Event im .Net ruft seine Ziele (InvokationList) aus dem Thread auf, aus dem es &amp;ldquo;gefeuert&amp;rdquo; wird. UI Controls, können i.A. nur im Mainthread arbeiten. Einen Zugriff aus einen anderen Thread führt zu einer Exception. Über das Interface ISynchronizedInvoke (implementiert von allen .Net UI Controls):&lt;/p></description></item><item><title>Tracing/Logging und die Config-Datei</title><link>https://www.alexander-koepke.de/post/2011-06-08-tracinglogging-config-file/</link><pubDate>Wed, 08 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-08-tracinglogging-config-file/</guid><description>&lt;p>Logging von Informationen ist so gut wie in jedem Programm notwendig. Nicht alle Entwickler können oder wollen ein professionelles Log-Tool wie z.B. &lt;a href="http://logging.apache.org/log4net/index.html">log4net&lt;/a> oder &lt;a href="http://nlog-project.org/">nlog&lt;/a> verwenden. In vielen Fällen reichen auch Debug.WriteLine oder Trace.WriteLine (letztes schreibt auch wenn die Software im Modus „Release“ kompiliert wurde).&lt;/p>
&lt;p>Über eine Config-Datei lassen sich u.a. verschiedene TraceListener auswählen:&lt;/p>
&lt;ol>
&lt;li>ConsoleTraceListener&lt;/li>
&lt;li>DefaultTraceListener&lt;/li>
&lt;li>DelimitedListTraceListener&lt;/li>
&lt;li>EventLogTraceListener&lt;/li>
&lt;li>EventSchemaTraceListener&lt;/li>
&lt;li>TextWriterTraceListener&lt;/li>
&lt;li>XmlWriterTraceListener&lt;/li>
&lt;li>eigene Implementierungen welche sich von TraceListener ableiten&lt;/li>
&lt;/ol>
&lt;p>Damit kann man ohne neu kompilieren des Assemblies einfach den Ausgabeort des Trace-Informationen verändern.&lt;/p></description></item><item><title>Einiges über IDisposable</title><link>https://www.alexander-koepke.de/post/2011-06-07-something-idisposable/</link><pubDate>Tue, 07 Jun 2011 00:00:00 +0000</pubDate><guid>https://www.alexander-koepke.de/post/2011-06-07-something-idisposable/</guid><description>&lt;p>Das Standard Interface IDisposable welches  zur &amp;ldquo;Freigabe&amp;rdquo; von Ressourcen in .Net dient ist recht Einfach:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#ff79c6">interface&lt;/span> &lt;span style="color:#50fa7b">IDisposable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">void&lt;/span> Dispose();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nur dieses Interface zu Implementieren reicht in vielen Fällen nicht aus. Es gibt z.B. einen FxCop Fehler &lt;a href="http://msdn.microsoft.com/en-us/library/ms244737(v=vs.80).aspx">Implement IDisposable correctly&lt;/a>, dieser erscheint u.a. bei non-sealed Klassen welche keinen Medthode mit der Signatur protected virtual Dispose(bool) besitzen.  IDisposable zu Implementieren wird nötig wenn man:&lt;/p>
&lt;ol>
&lt;li>unmanged (native) Ressourcen lädt um diese wieder freizugeben&lt;/li>
&lt;li>managed Felder besitzt, welche wiederum IDisposable implementieren&lt;/li>
&lt;/ol>
&lt;p>Im folgenden Beispiel zeigt eine (nach FxCop komplette Implementierung) einer Basis-Klasse  und einer Kind-Klasse:&lt;/p></description></item></channel></rss>