<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>idisposable on</title><link>https://koepalex.github.io/blog/tags/idisposable/</link><description>Recent content in idisposable on</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Tue, 07 Jun 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://koepalex.github.io/blog/tags/idisposable/index.xml" rel="self" type="application/rss+xml"/><item><title>Einiges über IDisposable</title><link>https://koepalex.github.io/blog/post/2011-06-07-something-idisposable/</link><pubDate>Tue, 07 Jun 2011 00:00:00 +0000</pubDate><guid>https://koepalex.github.io/blog/post/2011-06-07-something-idisposable/</guid><description>Das Standard Interface IDisposable welches zur &amp;ldquo;Freigabe&amp;rdquo; von Ressourcen in .Net dient ist recht Einfach:
public interface IDisposable { void Dispose(); }
Nur dieses Interface zu Implementieren reicht in vielen Fällen nicht aus. Es gibt z.B. einen FxCop Fehler Implement IDisposable correctly, dieser erscheint u.a. bei non-sealed Klassen welche keinen Medthode mit der Signatur protected virtual Dispose(bool) besitzen. IDisposable zu Implementieren wird nötig wenn man:
unmanged (native) Ressourcen lädt um diese wieder freizugeben managed Felder besitzt, welche wiederum IDisposable implementieren Im folgenden Beispiel zeigt eine (nach FxCop komplette Implementierung) einer Basis-Klasse und einer Kind-Klasse:</description></item></channel></rss>